# This is a basic workflow to help you get started with Actions

name: Gradle test

on:
  pull_request:
  push:
    branches: [ main ]

# Concurrency control to prevent redundant workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Define permissions at workflow level using least privilege principle
permissions:
  contents: read
  pull-requests: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        run: |
          mkdir -p runners
          git clone https://github.com/langgenius/dify.git runners/dify
          cd runners/dify/docker
          cp .env.example .env

      # Extract Dify version for cache key
      - name: Extract Dify version
        id: dify-version
        run: |
          cd runners/dify/docker
          # Extract version from docker-compose.yaml using grep and cut
          DIFY_VERSION=$(grep -E 'image: langgenius/dify-api:' docker-compose.yaml | head -1 | cut -d':' -f3)
          echo "Found Dify version: $DIFY_VERSION"
          echo "version=$DIFY_VERSION" >> $GITHUB_OUTPUT

      # Cache Docker images to avoid re-downloading
      - name: Cache Docker images
        uses: actions/cache@v3
        id: docker-cache
        with:
          path: /tmp/docker-images
          key: ${{ runner.os }}-docker-dify-${{ steps.dify-version.outputs.version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-dify-${{ steps.dify-version.outputs.version }}-

      # Cache Ollama models to avoid re-downloading
      - name: Cache Ollama models
        uses: actions/cache@v3
        id: ollama-cache
        with:
          path: ~/.ollama/models
          key: ollama-models-${{ hashFiles('**/ollama-models.txt') || 'bge-m3-latest' }}
          restore-keys: |
            ollama-models-

      - name: Load cached Docker images
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: |
          echo "Loading Docker images from cache for Dify version ${{ steps.dify-version.outputs.version }}..."
          docker load < /tmp/docker-images/dify-images.tar || true
          docker images

      - name: Start Docker containers
        run: |
          cd runners/dify/docker
          # Create volumes directory with appropriate permissions
          mkdir -p volumes/db/data
          chmod -R 777 volumes
          # Start containers
          docker compose up -d
          docker compose ps

      # Fix permissions after containers are started
      - name: Fix directory permissions
        run: |
          # Fix permission issues for volumes (especially PostgreSQL data)
          sudo chmod -R 777 runners/dify/docker/volumes || true

      - name: Save Docker images to cache
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          echo "Saving Docker images to cache for Dify version ${{ steps.dify-version.outputs.version }}..."
          mkdir -p /tmp/docker-images
          # Save all relevant images based on detected version
          docker images -a | grep -E "langgenius/dify|postgres|redis|weaviate" | awk '{print $1":"$2}' | xargs docker save -o /tmp/docker-images/dify-images.tar

      - name: Set up Ollama
        run: |
          # Instead of running Ollama directly on the host, run it in a Docker container and connect to Dify network
          docker run -d --name ollama -p 11434:11434 ollama/ollama
          # Wait for Ollama to initialize
          echo "Waiting for Ollama container to start..."
          sleep 10
          # Test if Ollama is running
          curl -s http://localhost:11434/api/tags
          
          # Find Dify network and connect Ollama to it
          DIFY_NETWORK=$(docker network ls | grep docker_default | awk '{print $1}')
          if [ -n "$DIFY_NETWORK" ]; then
            echo "Connecting Ollama to Dify network: $DIFY_NETWORK"
            docker network connect $DIFY_NETWORK ollama
          else
            echo "Warning: Could not find Dify network"
          fi

      - name: Pull Ollama model
        run: |
          # Pull model in the Ollama container
          docker exec ollama ollama pull bge-m3:latest

      - name: Check network configuration
        run: |
          echo "Host network information:"
          ip addr show
          
          echo "Docker network information:"
          docker network ls
          
          # Get the network name used by Dify
          NETWORK_NAME=$(docker network ls | grep dify | awk '{print $2}')
          if [ -n "$NETWORK_NAME" ]; then
            echo "Docker network details for $NETWORK_NAME:"
            docker network inspect $NETWORK_NAME
          fi
          
          # Get host IP
          HOST_IP=$(hostname -I | awk '{print $1}')
          echo "Host IP: $HOST_IP"
          
          # Test Ollama accessibility from host
          echo "Testing Ollama from host:"
          curl -s http://localhost:11434/api/tags || echo "Failed to connect to Ollama from host"
          
          # Test from a container
          echo "Testing Ollama from container:"
          docker run --rm curlimages/curl curl -s http://${HOST_IP}:11434/api/tags || echo "Failed to connect to Ollama from container"

      - name: Wait for application to start and verify health
        run: |
          cd runners/dify/docker
          # More robust wait using health check instead of fixed sleep
          attempt=0
          max_attempts=30
          until $(curl --output /dev/null --silent --fail http://localhost/console/api/init); do
            if [ ${attempt} -eq ${max_attempts} ]; then
              echo "Max attempts reached. Application failed to start."
              docker compose logs
              exit 1
            fi
            printf '.'
            attempt=$(($attempt+1))
            sleep 5
          done

      - name: Initialize Dify application
        run: |
          cd runners/dify/docker
          curl -sSf -X GET 'http://localhost/console/api/init' \
            -H 'Accept: */*' \
            -H 'Content-Type: application/json' \
            --retry 10 --retry-delay 5

      - name: Create admin user
        run: |
          cd runners/dify/docker
          curl -sSf -X POST 'http://localhost/console/api/setup' \
            -H 'Accept: */*' \
            -H 'Content-Type: application/json' \
            --data-raw '{"email":"admin@admin.com","name":"admin","password":"admin123456"}'

      - name: Get admin token
        id: get_token
        run: |
          cd runners/dify/docker
          # Install jq for reliable JSON parsing
          apt-get update && apt-get install -y jq || true
          RESPONSE=$(curl -sSf -X POST 'http://localhost/console/api/login' \
            -H 'Accept: */*' \
            -H 'Content-Type: application/json' \
            --data-raw '{"email":"admin@admin.com","password":"admin123456"}')
          TOKEN=$(echo $RESPONSE | jq -r '.data.access_token')
          echo "admin_token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Add dify Ollama Plugin
        run: |
          cd runners/dify/docker
          curl -sSf -X POST 'http://localhost/console/api/workspaces/current/plugin/install/marketplace' \
            -H 'Authorization: Bearer ${{ steps.get_token.outputs.admin_token }}' \
            -H 'Content-Type: application/json' \
            --data-raw '{"plugin_unique_identifiers":["langgenius/ollama:0.0.3@9ded90ac00e8510119a24be7396ba77191c9610d5e1e29f59d68fa1229822fc7"]}'

      - name: Wait for plugin to be installed
        run: |
          cd runners/dify/docker
          echo "Checking if plugin is installed correctly..."
          MAX_ATTEMPTS=10
          ATTEMPT=0
          PLUGIN_FOUND=false
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$PLUGIN_FOUND" != "true" ]; do
            RESPONSE=$(curl -sSf -X GET 'http://localhost/console/api/workspaces/current/plugin/list' \
              -H "Authorization: Bearer ${{ steps.get_token.outputs.admin_token }}" \
              -H 'Content-Type: application/json')
            
            # Install jq if not already installed
            apt-get update && apt-get install -y jq || true
            
            # Use jq to check if the plugin_id exists
            if echo "$RESPONSE" | jq -e '.plugins[] | select(.plugin_id=="langgenius/ollama")' > /dev/null; then
              echo "✅ Plugin 'langgenius/ollama' found and installed correctly!"
              PLUGIN_FOUND=true
            else
              echo "Plugin not yet installed (attempt $ATTEMPT/$MAX_ATTEMPTS). Waiting..."
              sleep 5
              ATTEMPT=$((ATTEMPT+1))
            fi
          done
          
          if [ "$PLUGIN_FOUND" != "true" ]; then
            echo "❌ Plugin installation failed or timed out!"
            exit 1
          fi

      - name: Add dify Ollama model
        run: |
          cd runners/dify/docker
          
          # Get Docker container name and network info for Ollama
          OLLAMA_CONTAINER_NAME="ollama"
          
          curl 'http://localhost/console/api/workspaces/current/model-providers/langgenius/ollama/ollama/models' \
            -H 'Authorization: Bearer ${{ steps.get_token.outputs.admin_token }}' \
            -H 'content-type: application/json' \
            --data-raw "{\"model\":\"bge-m3:latest\",\"model_type\":\"text-embedding\",\"credentials\":{\"mode\":\"chat\",\"context_size\":\"4096\",\"max_tokens\":\"4096\",\"vision_support\":\"false\",\"function_call_support\":\"false\",\"base_url\":\"http://${OLLAMA_CONTAINER_NAME}:11434\"},\"load_balancing\":{\"enabled\":false,\"configs\":[]}}"

      # Fix permissions again before Java setup
      - name: Fix permissions before Java setup
        run: |
          # Fix any remaining permission issues
          sudo chown -R $USER:$USER .
          sudo find . -type d -not -path "*/\.*" -exec chmod 755 {} \;
          sudo find . -type f -not -path "*/\.*" -exec chmod 644 {} \;

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      # Using Gradle's official action for better caching
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: "8.10.2"
          build-root-directory: .
          gradle-home-cache-cleanup: true

      - name: Run Gradle tests
        run: gradle test --info --debug

      # - name: Upload test results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test-results
      #     path: |
      #       **/build/reports/tests/
      #       **/build/test-results/
      #     retention-days: 7
