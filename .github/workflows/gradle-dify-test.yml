# This is a basic workflow to help you get started with Actions

name: Gradle dify test

# Controls when the workflow will run
on:
  pull_request:
    paths:
      - 'dify/**'
      - '.github/workflows/gradle-dify-test.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check marketplace access
        run: |
          MARKETPLACE_URL="https://marketplace.dify.ai/api/v1/plugins/download?unique_identifier=langgenius/ollama:0.0.4@03ff7db65ec6cebcb6065a12b41751f4dbb55c0480a5eb65dbb14e4b9bfe302a"
          echo "Checking access to Dify marketplace URL..."
          if ! curl -s -f -o /dev/null "$MARKETPLACE_URL"; then
            echo "::error::Cannot access $MARKETPLACE_URL - Exiting action"
            exit 1
          fi
          echo "Marketplace URL is accessible."

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: "dify-spring-boot-starter"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      # Using Gradle's official action for better caching
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: "8.10.2"
          build-root-directory: ./dify-spring-boot-starter
          gradle-home-cache-cleanup: true

      # Runs a single command using the runners shell
      - name: Clone Dify repository
        run: git clone https://github.com/langgenius/dify.git

      - name: Setup environment
        run: |
          cd dify/docker
          cp .env.example .env

      # Runs a set of commands using the runners shell
      - name: Start Docker containers
        run: |
          cd dify/docker
          docker compose up -d
          docker compose ps

      - name: Set up Ollama
        run: |
          # Instead of running Ollama directly on the host, run it in a Docker container and connect to Dify network
          docker run -d --name ollama -p 11434:11434 ollama/ollama
          # Wait for Ollama to initialize
          echo "Waiting for Ollama container to start..."
          sleep 10
          # Test if Ollama is running
          curl -s http://localhost:11434/api/tags
          
          # Find Dify network and connect Ollama to it
          DIFY_NETWORK=$(docker network ls | grep docker_default | awk '{print $1}')
          if [ -n "$DIFY_NETWORK" ]; then
            echo "Connecting Ollama to Dify network: $DIFY_NETWORK"
            docker network connect $DIFY_NETWORK ollama
          else
            echo "Warning: Could not find Dify network"
          fi
      - name: Pull Ollama model
        run: |
          # Pull model in the Ollama container
          docker exec ollama ollama pull bge-m3:latest
          docker exec ollama ollama pull qwen2.5:1.5b
      - name: Check network configuration
        run: |
          echo "Host network information:"
          ip addr show
          
          echo "Docker network information:"
          docker network ls
          
          # Get the network name used by Dify
          NETWORK_NAME=$(docker network ls | grep dify | awk '{print $2}')
          if [ -n "$NETWORK_NAME" ]; then
            echo "Docker network details for $NETWORK_NAME:"
            docker network inspect $NETWORK_NAME
          fi
          
          # Get host IP
          HOST_IP=$(hostname -I | awk '{print $1}')
          echo "Host IP: $HOST_IP"
          
          # Test Ollama accessibility from host
          echo "Testing Ollama from host:"
          curl -s http://localhost:11434/api/tags || echo "Failed to connect to Ollama from host"
          
          # Test from a container
          echo "Testing Ollama from container:"
          docker run --rm curlimages/curl curl -s http://${HOST_IP}:11434/api/tags || echo "Failed to connect to Ollama from container"
      - name: Initialize Dify application
        run: |
          cd dify/docker
          curl -sSf -X GET 'http://localhost/console/api/init' \
            -H 'Accept: */*' \
            -H 'Content-Type: application/json' \
            --retry 10 --retry-delay 5
      - name: Create admin user
        run: |
          cd dify/docker
          curl -sSf -X POST 'http://localhost/console/api/setup' \
            -H 'Accept: */*' \
            -H 'Content-Type: application/json' \
            --data-raw '{"email":"admin@admin.com","name":"admin","password":"admin123456"}' \
            --retry 5 --retry-delay 5
      - name: Get admin token
        id: get_token
        run: |
          cd dify/docker
          sudo apt-get update && sudo apt-get install -y jq
          echo "Attempting to login..."
          RESPONSE=$(curl -v -X POST 'http://localhost/console/api/login' \
            -H 'Accept: */*' \
            -H 'Content-Type: application/json' \
            --data-raw '{"email":"admin@admin.com","password":"admin123456"}' \
            --retry 5 --retry-delay 5)
          
          echo "Login response: $RESPONSE"
          
          if [ -z "$RESPONSE" ]; then
            echo "Error: Failed to get response from login API"
            exit 1
          fi
          
          TOKEN=$(echo "$RESPONSE" | jq -r '.data.access_token')
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Error: Failed to extract token from response"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          echo "Successfully obtained token"
          echo "admin_token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Add dify Ollama Plugin
        run: |
          cd dify/docker
          
          curl -sSf -X POST 'http://localhost/console/api/workspaces/current/plugin/install/marketplace' \
            -H 'Authorization: Bearer ${{ steps.get_token.outputs.admin_token }}' \
            -H 'Content-Type: application/json' \
            --data-raw '{"plugin_unique_identifiers":["langgenius/ollama:0.0.3@9ded90ac00e8510119a24be7396ba77191c9610d5e1e29f59d68fa1229822fc7"]}' \
            --retry 5 --retry-delay 5

      - name: Wait for plugin to be installed
        run: |
          cd dify/docker
          echo "Checking if plugin is installed correctly..."
          MAX_ATTEMPTS=10
          ATTEMPT=0
          PLUGIN_FOUND=false
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$PLUGIN_FOUND" != "true" ]; do
            RESPONSE=$(curl -sSf -X GET 'http://localhost/console/api/workspaces/current/plugin/list' \
              -H "Authorization: Bearer ${{ steps.get_token.outputs.admin_token }}" \
              -H 'Content-Type: application/json')
          
            # Install jq if not already installed
            apt-get update && apt-get install -y jq || true
          
            # Use jq to check if the plugin_id exists
            if echo "$RESPONSE" | jq -e '.plugins[] | select(.plugin_id=="langgenius/ollama")' > /dev/null; then
              echo "‚úÖ Plugin 'langgenius/ollama' found and installed correctly!"
              PLUGIN_FOUND=true
            else
              echo "Plugin not yet installed (attempt $ATTEMPT/$MAX_ATTEMPTS). Waiting..."
              sleep 1
              ATTEMPT=$((ATTEMPT+1))
            fi
          done
          
          if [ "$PLUGIN_FOUND" != "true" ]; then
            echo "‚ùå Plugin installation failed or timed out!"
            exit 1
          fi
      - name: Add dify Ollama model
        run: |
          cd dify/docker
          
          # Get Docker container name and network info for Ollama
          OLLAMA_CONTAINER_NAME="ollama"
          
          curl 'http://localhost/console/api/workspaces/current/model-providers/langgenius/ollama/ollama/models' \
            -H 'Authorization: Bearer ${{ steps.get_token.outputs.admin_token }}' \
            -H 'content-type: application/json' \
            --data-raw "{\"model\":\"bge-m3:latest\",\"model_type\":\"text-embedding\",\"credentials\":{\"mode\":\"chat\",\"context_size\":\"4096\",\"max_tokens\":\"4096\",\"vision_support\":\"false\",\"function_call_support\":\"false\",\"base_url\":\"http://${OLLAMA_CONTAINER_NAME}:11434\"},\"load_balancing\":{\"enabled\":false,\"configs\":[]}}"
          
          curl 'http://localhost/console/api/workspaces/current/model-providers/langgenius/ollama/ollama/models' \
            -H 'Authorization: Bearer ${{ steps.get_token.outputs.admin_token }}' \
            -H 'content-type: application/json' \
            --data-raw "{\"model\":\"qwen2.5:1.5b\",\"model_type\":\"llm\",\"credentials\":{\"mode\":\"chat\",\"context_size\":\"40960\",\"max_tokens\":\"4096\",\"vision_support\":\"false\",\"function_call_support\":\"false\",\"base_url\":\"http://${OLLAMA_CONTAINER_NAME}:11434\"},\"load_balancing\":{\"enabled\":false,\"configs\":[]}}"

      - name: Add test chat
        run: |
          cd dify/docker
          
          OLLAMA_CONTAINER_NAME="ollama"
          
          curl 'http://localhost/console/api/apps/imports' \
            -H 'Authorization: Bearer ${{ steps.get_token.outputs.admin_token }}' \
            -H 'content-type: application/json' \
            --data-raw $'{"mode":"yaml-content","yaml_content":"app:\\n  description: \'\'\\n  icon: ü§ñ\\n  icon_background: \'#FFEAD5\'\\n  mode: chat\\n  name: test\\n  use_icon_as_answer_icon: false\\ndependencies:\\n- current_identifier: null\\n  type: marketplace\\n  value:\\n    marketplace_plugin_unique_identifier: langgenius/ollama:0.0.3@9ded90ac00e8510119a24be7396ba77191c9610d5e1e29f59d68fa1229822fc7\\nkind: app\\nmodel_config:\\n  agent_mode:\\n    enabled: false\\n    max_iteration: 5\\n    strategy: function_call\\n    tools: []\\n  annotation_reply:\\n    enabled: false\\n  chat_prompt_config: {}\\n  completion_prompt_config: {}\\n  dataset_configs:\\n    datasets:\\n      datasets: []\\n    reranking_enable: false\\n    retrieval_model: multiple\\n    top_k: 4\\n  dataset_query_variable: \'\'\\n  external_data_tools: []\\n  file_upload:\\n    allowed_file_extensions:\\n    - .JPG\\n    - .JPEG\\n    - .PNG\\n    - .GIF\\n    - .WEBP\\n    - .SVG\\n    - .MP4\\n    - .MOV\\n    - .MPEG\\n    - .MPGA\\n    allowed_file_types: []\\n    allowed_file_upload_methods:\\n    - remote_url\\n    - local_file\\n    enabled: false\\n    image:\\n      detail: high\\n      enabled: false\\n      number_limits: 3\\n      transfer_methods:\\n      - remote_url\\n      - local_file\\n    number_limits: 3\\n  model:\\n    completion_params:\\n      stop: []\\n    mode: chat\\n    name: qwen2.5:1.5b\\n    provider: langgenius/ollama/ollama\\n  more_like_this:\\n    enabled: false\\n  opening_statement: \'\'\\n  pre_prompt: \'\'\\n  prompt_type: simple\\n  retriever_resource:\\n    enabled: true\\n  sensitive_word_avoidance:\\n    configs: []\\n    enabled: false\\n    type: \'\'\\n  speech_to_text:\\n    enabled: false\\n  suggested_questions: []\\n  suggested_questions_after_answer:\\n    enabled: false\\n  text_to_speech:\\n    enabled: false\\n    language: \'\'\\n    voice: \'\'\\n  user_input_form: []\\nversion: 0.2.0\\n"}'

      - name: Set default model
        run: |
          cd dify/docker
          
          curl 'http://localhost/console/api/workspaces/current/default-model' \
            -H 'Authorization: Bearer ${{ steps.get_token.outputs.admin_token }}' \
            -H 'content-type: application/json' \
            --data-raw '{"model_settings":[{"model_type":"llm","provider":"langgenius/ollama/ollama","model":"qwen2.5:1.5b"},{"model_type":"text-embedding","provider":"langgenius/ollama/ollama","model":"bge-m3:latest"},{"model_type":"rerank"},{"model_type":"speech2text"},{"model_type":"tts"}]}'

      - name: Run Gradle tests
        run: |
          cd dify-spring-boot-starter
          gradle jacocoTestReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov_yml_path: .github/.codecov.yml

          #- name: Upload test results to Codecov
          #  if: ${{ !cancelled() }}
          #  uses: codecov/test-results-action@v1
          #  with:
          #    token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov shell
        if: ${{ !cancelled() }}
        run: |
          cd dify-spring-boot-starter
          curl -Os https://cli.codecov.io/latest/linux/codecov
          sudo chmod +x codecov
          ./codecov do-upload -C ${{ github.sha }} --report-type test_results -t ${{ secrets.CODECOV_TOKEN }}
